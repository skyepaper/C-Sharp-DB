namespace Theatre.DataProcessor
{
    using Newtonsoft.Json;
    using System;
    using System.IO;
    using System.Linq;
    using System.Text;
    using System.Xml.Serialization;
    using Theatre.Data;
    using Theatre.Data.Models.Enums;
    using Theatre.DataProcessor.ExportDto;

    public class Serializer
    {
        public static string ExportTheatres(TheatreContext context, int numbersOfHalls)
        {
            var theatres = context
                .Theatres
                .ToArray()
                .Where(t => t.NumberOfHalls >= numbersOfHalls && t.Tickets.Count >= 20)
                .Select(t => new ExportTheatreDto
                {
                    Name = t.Name,
                    Halls = t.NumberOfHalls,
                   
                    Tickets = t.Tickets
                        .Where(ti => ti.RowNumber <= 5)
                        .Select(ti => new ExportTicketDto
                        {
                            Price = ti.Price,
                            RowNumber = ti.RowNumber
                        })
                        .OrderByDescending(ti => ti.Price)
                        .ToList(),
                    
                    TotalIncome= t.Tickets
                        .Where(ti => ti.RowNumber <= 5)
                        .Sum(ti=>ti.Price)

                }) 
                .OrderByDescending(te => te.Halls)
                .ThenBy(te=>te.Name)
                .ToArray();


            string json = JsonConvert.SerializeObject(theatres, Formatting.Indented);

            return json;

        }

        public static string ExportPlays(TheatreContext context, double rating)
        {
            StringBuilder sb = new StringBuilder();

            XmlSerializer xmlSerializer = new XmlSerializer(typeof(ExportPlayDto[]), new XmlRootAttribute("Plays"));
            XmlSerializerNamespaces namespaces = new XmlSerializerNamespaces();
            namespaces.Add(string.Empty, string.Empty);

            var plays = context
               .Plays
               .ToArray()
               .Where(p => p.Rating <= rating)
               .Select(p => new ExportPlayDto()
               {
                   Title = p.Title,
                   Duration = p.Duration.ToString("c"),
                   Rating=p.Rating==0 ? "Premier" : $"{p.Rating}",
                   Genre= p.Genre,
                   Actors= new ExportActorsDto()
                   {
                     Actors=p.Casts
                             .Where(a=>a.IsMainCharacter==true)
                             .Select(a=>new ExportActorDto()
                             {
                                 FullName=a.FullName,
                                 MainCharacter=$"Plays main character in '{p.Title}'."
                             })
                             .OrderByDescending(a=>a.FullName)
                             .ToList()
                   }
                   
               })
                .OrderBy(p=>p.Title)
                .ThenByDescending(p=>p.Genre)
                .ToArray();

            using (StringWriter stringWriter = new StringWriter(sb))
            {
                xmlSerializer.Serialize(stringWriter, plays, namespaces);
            }

            return sb.ToString().TrimEnd();

        }
    }
}
