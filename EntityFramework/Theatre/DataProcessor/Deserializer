namespace Theatre.DataProcessor
{
    using Newtonsoft.Json;
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.IO;
    using System.Text;
    using System.Xml.Serialization;
    using Theatre.Data;
    using Theatre.Data.Models;
    using Theatre.Data.Models.Enums;
    using Theatre.DataProcessor.ImportDto;

    public class Deserializer
    {
        private const string ErrorMessage = "Invalid data!";

        private const string SuccessfulImportPlay
            = "Successfully imported {0} with genre {1} and a rating of {2}!";

        private const string SuccessfulImportActor
            = "Successfully imported actor {0} as a {1} character!";

        private const string SuccessfulImportTheatre
            = "Successfully imported theatre {0} with #{1} tickets!";

        public static string ImportPlays(TheatreContext context, string xmlString)
        {
            StringBuilder sb = new StringBuilder();

            XmlSerializer xmlSerializer = new XmlSerializer(typeof(ImportPlayDto[]), new XmlRootAttribute("Plays"));

            using (StringReader stringReader = new StringReader(xmlString))
            {
                ImportPlayDto[] playDtos = (ImportPlayDto[])xmlSerializer.Deserialize(stringReader);
                List<Play> plays = new List<Play>();

                foreach (ImportPlayDto playDto in playDtos)
                {
                    if (!IsValid(playDto))
                    {
                        sb.AppendLine(ErrorMessage);
                        continue;
                    }

                    var duration = playDto.Duration;
                    var data = duration.Split(":");
                    var hours = data[0];

                    if (hours == "00")
                    {
                        sb.AppendLine(ErrorMessage);
                        continue;
                    }
                    bool enumValid = Enum.IsDefined(typeof(Genre), playDto.Genre);

                    if (!enumValid)
                    {
                        sb.AppendLine(ErrorMessage);
                        continue;
                    }
                    Play play = new Play()
                    {
                        Title = playDto.Title,
                        Duration = TimeSpan.Parse(playDto.Duration),
                        Rating = playDto.Rating,
                        Genre = (Genre)Enum.Parse(typeof(Genre), playDto.Genre),
                        Description = playDto.Description,
                        Screenwriter = playDto.Screenwriter
                    };

                    plays.Add(play);
                    sb.AppendLine(String.Format(SuccessfulImportPlay, play.Title, play.Genre, play.Rating));
                }
                context.Plays.AddRange(plays);
                context.SaveChanges();
            }
                return sb.ToString().TrimEnd();
            }

        public static string ImportCasts(TheatreContext context, string xmlString)
        {
            StringBuilder sb = new StringBuilder();

            XmlSerializer xmlSerializer = new XmlSerializer(typeof(ImportCastDto[]), new XmlRootAttribute("Casts"));

            using (StringReader stringReader = new StringReader(xmlString))
            {
                ImportCastDto[] castDtos = (ImportCastDto[])xmlSerializer.Deserialize(stringReader);
                List<Cast> casts = new List<Cast>();

                foreach (ImportCastDto castDto in castDtos)
                {
                    if (!IsValid(castDto))
                    {
                        sb.AppendLine(ErrorMessage);
                        continue;
                    }

                    Cast cast = new Cast()
                    {
                        FullName=castDto.FullName,
                        IsMainCharacter=castDto.IsMainCharacter,
                        PhoneNumber=castDto.PhoneNumber,
                        PlayId=castDto.PlayId
                    };

                    var typeChar = cast.IsMainCharacter ? "main" : "lesser";

                    casts.Add(cast);
                    sb.AppendLine(String.Format(SuccessfulImportActor, cast.FullName, typeChar));
                }
                context.Casts.AddRange(casts);
                context.SaveChanges();
            }
            return sb.ToString().TrimEnd();

        }

                public static string ImportTtheatersTickets(TheatreContext context, string jsonString)
        {
            var tickCount = 0;

            StringBuilder sb = new StringBuilder();
            List<Theatre> theatres = new List<Theatre>();
            var theatreDtos = JsonConvert.DeserializeObject<IEnumerable<ImportTheatreDto>>(jsonString);

            foreach (var theatreDto in theatreDtos)
            {
                if (!IsValid(theatreDto))
                {
                    sb.AppendLine(ErrorMessage);
                    continue;
                }

                Theatre theatre = new Theatre()
                {
                    Name = theatreDto.Name,
                    NumberOfHalls = theatreDto.NumberOfHalls,
                    Director = theatreDto.Director
                };
               
                List<Ticket> tickets = new List<Ticket>();
               

                foreach (var ticketDto in theatreDto.Tickets)
                {
                    if (!IsValid(ticketDto))
                    {
                        sb.AppendLine(ErrorMessage);
                        continue;
                    }

                    Ticket ticket = new Ticket()
                    {
                        Price = ticketDto.Price,
                        RowNumber = ticketDto.RowNumber,
                        Play=context.Plays.FirstOrDefault(p=>p.Id==ticketDto.PlayId),
                        Theatre=theatre
                    };
                    tickets.Add(ticket);
                }

                theatre.Tickets = tickets;
                tickCount += tickets.Count;
                context.Tickets.AddRange(tickets);
                theatres.Add(theatre);

                sb.AppendLine(String.Format(SuccessfulImportTheatre, theatre.Name,theatre.Tickets.Count));
            }

            context.Theatres.AddRange(theatres);
            context.SaveChanges();

            return sb.ToString().TrimEnd();

        }


        private static bool IsValid(object obj)
        {
            var validator = new ValidationContext(obj);
            var validationRes = new List<ValidationResult>();

            var result = Validator.TryValidateObject(obj, validator, validationRes, true);
            return result;
        }
    }
}
